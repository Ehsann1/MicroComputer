;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;#define S_SEGMENT PORTD
;#define EN_S_SEGMENT_3 PORTC.1 = 0
;#define EN_S_SEGMENT_2 PORTC.2 = 0
;#define EN_S_SEGMENT_1 PORTC.3 = 0
;
;#define D_S_SEGMENT_3 PORTC.1 = 1
;#define D_S_SEGMENT_2 PORTC.2 = 1
;#define D_S_SEGMENT_1 PORTC.3 = 1
;
;int number = 0 , turn_15_ms = 0;
;
;
;char BCD(int num);
;int split_number_one(int number);
;int split_number_decimal(int number);
;int split_number_hundreds(int number);
;
;
;void main(void){
; 0000 0016 void main(void){

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0017 
; 0000 0018     DDRC = 0XFF;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0019     DDRD = 0XFF;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001A 
; 0000 001B     D_S_SEGMENT_1;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 001C     D_S_SEGMENT_2;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 001D     D_S_SEGMENT_3;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001E 
; 0000 001F     while (1){
;PCODE: $00000018 VOL: 0
; 0000 0020 
; 0000 0021 
; 0000 0022 
; 0000 0023 
; 0000 0024 
; 0000 0025         //EN_S_SEGMENT_1;
; 0000 0026 //        S_SEGMENT = BCD(9);
; 0000 0027         EN_S_SEGMENT_1;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0028         S_SEGMENT = BCD(split_number_one(number));
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0029 
; 0000 002A         delay_ms(5);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002B 
; 0000 002C         D_S_SEGMENT_1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002D         delay_ms(1);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002E 
; 0000 002F         EN_S_SEGMENT_2;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030         S_SEGMENT = BCD(split_number_decimal(number));
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0031 
; 0000 0032         delay_ms(5);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0033 
; 0000 0034         D_S_SEGMENT_2;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0035 
; 0000 0036         delay_ms(1);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0037 
; 0000 0038 
; 0000 0039         EN_S_SEGMENT_3;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 003A         S_SEGMENT = BCD(split_number_hundreds(number));
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 003B 
; 0000 003C         delay_ms(5);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 003D 
; 0000 003E 
; 0000 003F 
; 0000 0040         D_S_SEGMENT_3;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0041 
; 0000 0042         delay_ms(1);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0043 
; 0000 0044         turn_15_ms++;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0045 
; 0000 0046         if(turn_15_ms > 69){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0047             turn_15_ms=0;
;PCODE: $0000004C VOL: 0
; 0000 0048             number++;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0049         }
; 0000 004A         if(number>999){number=0;}
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004B     }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004C }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;
;
;
;int split_number_one(int number){
; 0000 0050 int split_number_one(int number){
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0051     return number % 10 ;
;PCODE: $0000005D VOL: 0
;	number -> Y+0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0052 }
;PCODE: $00000063 VOL: 0
;int split_number_decimal(int number){
; 0000 0053 int split_number_decimal(int number){
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0054     return (number % 100)/ 10 ;
;PCODE: $00000066 VOL: 0
;	number -> Y+0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0055 }
;PCODE: $0000006F VOL: 0
;int split_number_hundreds(int number){
; 0000 0056 int split_number_hundreds(int number){
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0057     return (number % 1000) / 10 / 10;
;PCODE: $00000072 VOL: 0
;	number -> Y+0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0058 }
;PCODE: $0000007E VOL: 0
;
;char BCD(int num){
; 0000 005A char BCD(int num){
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005B     switch (num){
;PCODE: $00000081 VOL: 0
;	num -> Y+0
;PCODE: $00000082 VOL: 0
; 0000 005C         case 0:
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 005D             // Code :0
; 0000 005E             return 0XC0;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 005F             break;
;PCODE: $00000088 VOL: 0
; 0000 0060         case 1:
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0061             // Code :1
; 0000 0062             return 0XF9;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0063             break;
;PCODE: $0000008F VOL: 0
; 0000 0064         case 2:
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0065             // Code :2
; 0000 0066             return 0XA4;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0067             break;
;PCODE: $00000096 VOL: 0
; 0000 0068         case 3:
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0069             // Code :3
; 0000 006A             return 0X30;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 006B             break;
;PCODE: $0000009D VOL: 0
; 0000 006C         case 4:
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 006D             // Code :4
; 0000 006E             return 0X99;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 006F             break;
;PCODE: $000000A4 VOL: 0
; 0000 0070         case 5:
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0071             // Code :5
; 0000 0072             return 0X92;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0073             break;
;PCODE: $000000AB VOL: 0
; 0000 0074         case 6:
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0075             // Code :6
; 0000 0076             return 0X82;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0077             break;
;PCODE: $000000B2 VOL: 0
; 0000 0078         case 7:
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0079             // Code :7
; 0000 007A             return 0XF8;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 007B             break;
;PCODE: $000000B9 VOL: 0
; 0000 007C         case 8:
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 007D             // Code :8
; 0000 007E             return 0X80;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007F             break;
;PCODE: $000000C0 VOL: 0
; 0000 0080         case 9:
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0081             // Code :9
; 0000 0082             return 0X90;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0083             break;
;PCODE: $000000C7 VOL: 0
; 0000 0084     }
;PCODE: $000000C8 VOL: 0
; 0000 0085 }
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
